I ran the following command to get my ambiguous puzzle that is 5x5. 

?- ambiguous(5,C,N1,N2).

Results: 
C = counts([4,2,3,2,1],[1,3,2,3,2],[5,3,2,3,1],[1,2,3,2,2])
N1 = [[1,2,3,4,5],[2,1,4,5,3],[4,5,2,3,1],[3,4,5,1,2],[5,3,1,2,4]]
N2 = [[1,2,3,4,5],[3,1,4,5,2],[4,5,2,3,1],[2,4,5,1,3],[5,3,1,2,4]] ? ;

C = counts([4,2,3,2,1],[2,2,1,4,3],[5,3,2,1,3],[1,2,3,2,2])
N1 = [[1,2,3,4,5],[2,1,4,5,3],[4,5,2,3,1],[5,3,1,2,4],[3,4,5,1,2]]
N2 = [[1,2,3,4,5],[3,1,4,5,2],[4,5,2,3,1],[5,3,1,2,4],[2,4,5,1,3]] ? ;

C = counts([3,4,3,2,1],[2,1,2,2,4],[5,3,1,3,2],[1,2,2,2,3])
N1 = [[1,2,3,4,5],[2,1,4,5,3],[5,3,1,2,4],[3,4,5,1,2],[4,5,2,3,1]]
N2 = [[1,2,3,4,5],[3,1,4,5,2],[5,3,1,2,4],[2,4,5,1,3],[4,5,2,3,1]] ? 

...(more not listed)...

Above are 3 ambiguous 5x5 puzzles that I found with my prolog program.

---------------------------------------------------------------------------
I used the following testcase for my speedup:

tower(5, _, counts([2,2,4,2,1],[3,2,1,2,5],[3,3,1,2,2],[1,2,3,3,3]))
plain_tower(5, _, counts([2,2,4,2,1],[3,2,1,2,5],[3,3,1,2,2],[1,2,3,3,3]))

Result of 'speedup(Ratio).' :

Ratio = 23.48469387755102

This shows that the solution involving finite domain solver is significantly more 
efficient than the plain_tower solution.

---------------------------------------------------------------------------

I consulted the TA's hint code and used the stack overflow implementation
of transpose linked by the hint code.